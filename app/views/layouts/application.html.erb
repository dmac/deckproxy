<html>
  <head>
    <title>Magic: The Gathering</title>
    <script src="/javascripts/jquery-1.4.4.min.js"></script>
    <script src="/javascripts/application.js"></script>
    <%= stylesheet_link_tag "main" %>
    <%= render :partial => "layouts/analytics" %>
    <script type="text/javascript">
      Searcher = {
        maxScroll: 3000,
        currFormat: null,

        init: function() {
          $(document).keydown(Searcher.onKeyDown);
          $("#advancedSearchTrigger").click(Searcher.onAdvancedClick);
          $("#searchbox").focus(Searcher.onSearchFocus);
          $("#searchbox").blur(Searcher.onSearchBlur);
        },

        focusSearchbox: function(field, event) {
          if (event)
            event.preventDefault();
          $("#searchbox").focus();
          if (field != "") {
            $("#searchbox").val(field + ": ");
          } else {
            $("#searchbox").val("");
            $("#searchBreadcrumbs").html("")
          }
        },

        newSearch: function() {
          if ($("#searchbox.grayText").size() > 0) {
            console.log("returning");
            return;
          }
          Searcher.maxScroll = 3000;
          Searcher.search(0, true);
        },

        search: function(offset, newSearch, queryString) {
          query = $("#searchbox").val(); ;
          if (queryString) {
            query = queryString
          }

          //if we are not on the homepage, redirect there, less we
          //break things.  this is really hacky and should be fixed.
          if (window.location.pathname != "/" &&
              window.location.pathname.substr(0, 11) != "/deck/edit/") {
            if ($("#deckmetadata").length) {
              var deckHash = $("#deckmetadata").attr("deckhash");
              window.location.href= "/deck/edit/" + deckHash + "?search=" + query;
            }
          }

          $("#searchbox").blur();

          var queries = [];
          var breadcrumbs = $(".breadcrumb input");
          $.each(breadcrumbs, function(index, element) {
            queries.push([$(element).attr("name"), $(element).val()])
          });

          if (newSearch)
            $("#searchResults").html("");

          $.ajax({
              type: "POST",
              url: "/search/search",
              data: {
                query: query,
                queries: queries,
                offset: offset
              },
              success: function(returnedHTML) {
                var prevResultsHTML = $("#searchResults").html();
                $("#searchResults").html(prevResultsHTML + returnedHTML);
                $("#searchResults .card").click(CardDisplay.onClickCard);
                CardDisplay.attachScrollListener();
                CardDisplay.handleCardMode();
              }
          });
        },

        onSearchFocus: function() {
          $("#searchbox").val("");
          $("#searchbox").removeClass("grayText");
        },

        onSearchBlur: function() {
          if ($("#searchbox").val() != "")
            return;

          $("#searchbox").addClass("grayText");
          $("#searchbox").val('type "/" to search');
        },

        onAdvancedClick: function(event) {
          event.preventDefault();
          if ($("#advancedSearchTray").attr("invisible")) {
            $("#advancedSearchTray").removeAttr("invisible");
          }
          else {
            $("#advancedSearchTray").attr("invisible", 'true');
          }
        },

        sortGrid: function(sortOn) {
          $.ajax({
            type: "POST",
            url: "/search/set_sort",
            data: {
              sort: sortOn
            },
            success: function() {
              Searcher.search(0, true, "");
            }
          });
        },

        setFormat: function(format) {
          $.ajax({
            type: "POST",
            url: "/search/set_format",
            data: {
              format: format
            },
            success: function() {
              var offset = $("#loadMore").val();
              Searcher.search(0, true, "");
            }
          });
        },

        onKeyDown: function(event) {
          if ($("*:focus").size() > 0 && event.which != 13)
            return;


          //console.log("keypress: " + event.which);

          switch (event.which) {
            case 13: Searcher.newSearch(); break; // return
            case 191: Searcher.focusSearchbox("", event); break; // /
            case 78: Searcher.focusSearchbox("name", event); break; // n
            case 84: Searcher.focusSearchbox("text", event); break; // t
            case 77: Searcher.focusSearchbox("mana", event); break; // m
            case 67: Searcher.focusSearchbox("color", event); break; // c
            case 89: Searcher.focusSearchbox("type", event); break; // y
            case 83: Searcher.focusSearchbox("set", event); break; // s
            case 188: Searcher.focusSearchbox("power", event); break; // ,
            case 190: Searcher.focusSearchbox("toughness", event); break; // .
          }
        },
      }

      $(document).ready(Searcher.init);

    </script>
  </head>
   <body>
    <div id="main">
      <div id="pageBox">
        <div id="searchSection">
          <div id="header">
            <div id="searchboxDiv">
              <input id="searchField" type="hidden" value="name" />
              <input id="searchbox" class="grayText" value='type "/" to search' type="text" />
              <label>in format</label>
              <%=
              option_string = ""
              format_options = ['All', 'Extended', 'Standard', 'Block']

              @format = ((session[:format]) ? session[:format] : 'all')
              format_options.each do |format|
                option_string = option_string + "<option" +
                  ((@format == format.downcase) ? " selected='selected'>" : ">")
                option_string = option_string + format + "</option>"
              end
              select_tag 'format',
                option_string,
                {:onchange => "Searcher.setFormat(" +
                              "this.options[this.selectedIndex].value" +
                              ");"}
              %>
              <label>, sorted by</label>
              <%=
              option_string = ""
              sort_options = ['Name', 'Color', 'Cost', 'Type',
                              'Set', 'Power', 'Toughness']
              sort_options.each do |option|
                option_string = option_string + "<option" +
                  ((session[:sort] == option.split.first.downcase) ? " selected='selected'>" : ">")
                option_string = option_string + option + "</option>"
              end
              select_tag 'sort',
                option_string,
                {:onchange => "Searcher.sortGrid(" +
                              "this.options[this.selectedIndex].value" +
                              ");"}
              %>

              
            </div>
            <div id="nav"><%= render :partial => "layouts/login" %></div>
          </div>
        <%= yield %>
        </div>
        <%= render :partial => "/search/deckmetadata", :locals => {:deck => @deck,
          :viewing_deck => false} %>
      </div>
    </div>
  </body>
</html>

