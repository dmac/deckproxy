<script type="text/javascript">
  CardDisplay = {
    maxScroll: 3000,
    currFormat: null,

    init: function() {
      $(document).keydown(CardDisplay.onKeyDown);
      var search = $("#resultsSection").attr("search");
      if (search != "") {
        Searcher.onSearchFocus();
        $("#searchbox").val(search);
        Searcher.newSearch();
      }
    },

    onClickCard: function(event) {
      event.stopPropagation();
      var card = $(event.currentTarget);
      var cardId = card.attr("cardid");
      var deckId = $("#deckmetadata").attr("deckid");
      var deckName = $("#deckmetadata").attr("deckname");

      $.ajax({
          type: "POST",
          url: "/search/add_card_to_deck",
          data: {
            card_id: cardId,
            deck_id: deckId,
            deck_name: deckName
          },
          success: function(html) {
            if (html != "")
            {
              $("#deckmetadata").replaceWith(html);
            }
          }
      });
    },

    attachScrollListener: function() {
      if ($("#loadMore").val() == "none")
        $(document).unbind("scroll");
      else
        $(document).bind("scroll", CardDisplay.onScroll);
    },

    onScroll: function(event) {
      if (document.body.scrollTop > CardDisplay.maxScroll) {
        CardDisplay.maxScroll += 3000;
        var offset = $("#loadMore").val();
        $("#loadMore").remove();
        Searcher.search(offset, false);
      }
    },

    previousBreadcrumb: function(event) {
      event.preventDefault(); // prevent moving backwards through browser history

      $(".breadcrumb").last().remove();
      if ($(".breadcrumb").size() == 0) {
        $("#searchBreadcrumbs").remove();
      }
      $("#searchbox").val("");
      CardDisplay.maxScroll = 3000;
      CardDisplay.search(0, true);
    },

    isCardMode: false,
    toggleCardMode: function() {
      $.ajax({
        type: "POST",
        url: "/search/toggle_card_mode",
        data: {},
        success: function(cardMode) {
          if (cardMode.match(/true/)) {
            CardDisplay.activateCardMode();
          } else {
            CardDisplay.deactivateCardMode();
          }
        }
      });
    },

    setFormat: function(format) {
      $.ajax({
        type: "POST",
        url: "/search/set_format",
        data: {
          format: format
        },
        success: function() {
          var offset = $("#loadMore").val();
          Searcher.search(0, true, "");
        }
      });
    },

    sortGrid: function(sortOn) {
      $.ajax({
        type: "POST",
        url: "/search/set_sort",
        data: {
          sort: sortOn
        },
        success: function() {
          Searcher.search(0, true, "");
        }
      });
    },

    activateCardMode: function() {
      CardDisplay.isCardMode = true;
      var cards = $("#searchResults .card_skeleton");
      $.each(cards, function(index, element) {
        if (index <= 9) {
          var child = element.firstChild;
          while (child.id != "card_selector") {
            child = child.nextSibling;
            if (!child) return;
          }
          var selectorLabel = child;
          selectorLabel.innerHTML = ((index + 1) % 10);
        } else {
          return;
        }
      });
    },

    deactivateCardMode: function() {
      CardDisplay.isCardMode = false;
      var cards = $("#searchResults .card_skeleton");
      $.each(cards, function(index, element) {
        if (index <= 9) {
          var child = element.firstChild;
          while (child.id != "card_selector") {
            child = child.nextSibling;
            if (!child) return;
          }
          var selectorLabel = child;
          selectorLabel.innerHTML = "";
        } else {
          return;
        }
      });
    },

    handleCardMode: function() {
      $.ajax({
        type: "POST",
        url: "/search/get_card_mode",
        data: {},
        success: function(cardMode) {
          if (cardMode.match(/true/)) {
            CardDisplay.activateCardMode();
          } else {
            CardDisplay.deactivateCardMode();
          }
        }
      });
    },

    selectCard: function(selectNum) {
      if (!this.isCardMode) return;

      var cards = $("#searchResults .card_skeleton");
      var cardId = $(cards[selectNum -1]).attr("cardid");
      var deckId = $("#deckmetadata").attr("deckid");
      var deckName = $("#deckmetadata").attr("deckname");

      $.ajax({
          type: "POST",
          url: "/search/add_card_to_deck",
          data: {
            card_id: cardId,
            deck_id: deckId,
            deck_name: deckName
          },
          success: function(html) {
            if (html != "")
            {
              $("#deckmetadata").replaceWith(html);
            }
          }
      });
    },

    onKeyDown: function(event) {
      if ($("*:focus").size() > 0 && event.which != 13)
        return;


      //console.log("keypress: " + event.which);

      switch (event.which) {
        case 8: CardDisplay.previousBreadcrumb(event); break; // backspace
        case 88: CardDisplay.toggleCardMode(event); break; // x
        case 49: CardDisplay.selectCard(1); break; // 1
        case 50: CardDisplay.selectCard(2); break; // 2
        case 51: CardDisplay.selectCard(3); break; // 3
        case 52: CardDisplay.selectCard(4); break; // 4
        case 53: CardDisplay.selectCard(5); break; // 5
        case 54: CardDisplay.selectCard(6); break; // 6
        case 55: CardDisplay.selectCard(7); break; // 7
        case 56: CardDisplay.selectCard(8); break; // 8
        case 57: CardDisplay.selectCard(9); break; // 9
        case 48: CardDisplay.selectCard(10); break; // 0
      }
    },


  }

  $(document).ready(CardDisplay.init);

  window.onresize = function(event) {
    Utils.repositionDeckMetadata(680, 880);
  }

  window.onload = function(event) {
    Utils.repositionDeckMetadata(680, 880);
  }

</script>

<div id="resultsSection" search="<%= params[:search] %>">
      <div id="searchResults">
      </div>
</div>

  <%= render :partial => "deckmetadata", :locals => {:deck => @deck, :viewing_deck => false} %>
