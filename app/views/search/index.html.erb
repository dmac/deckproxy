<script type="text/javascript">
  Searcher = {
    maxScroll: 3000,
    currFormat: null,

    init: function() {
      $(document).keydown(Searcher.onKeyDown);
      $("#searchbox").focus(Searcher.onSearchFocus);
      $("#searchbox").blur(Searcher.onSearchBlur);
    },

    onClickCard: function(event) {
      event.stopPropagation();
      var card = $(event.currentTarget);
      var cardId = card.attr("cardid");
      var deckId = $("#deckmetadata").attr("deckid");
      var deckName = $("#deckmetadata").attr("deckname");

      $.ajax({
          type: "POST",
          url: "/search/add_card_to_deck",
          data: {
            card_id: cardId,
            deck_id: deckId,
            deck_name: deckName
          },
          success: function(html) {
            if (html != "")
            {
              $("#deckmetadata").replaceWith(html);
            }
          }
      });
    },

    focusSearchbox: function(field, event) {
      if (event)
        event.preventDefault();
      $("#searchbox").focus();
      if (field != "") {
        $("#searchbox").val(field + ": ");
      } else {
        $("#searchbox").val("");
        $("#searchBreadcrumbs").html("")
        Searcher.newSearch();
      }
    },

    newSearch: function() {
      if ($("#searchbox.grayText").size() > 0) {
        console.log("returning");
        return;
      }
      Searcher.maxScroll = 3000;
      Searcher.search(0, true);
    },

    search: function(offset, newSearch, queryString) {
      query = $("#searchbox").val(); ;
      if (queryString) {
        query = queryString
      }

      $("#searchbox").blur();

      var queries = [];
      var breadcrumbs = $(".breadcrumb input");
      $.each(breadcrumbs, function(index, element) {
        queries.push([$(element).attr("name"), $(element).val()])
      });

      if (newSearch)
        $("#searchResults").html("");

      $.ajax({
          type: "POST",
          url: "/search/search",
          data: {
            query: query,
            queries: queries,
            offset: offset
          },
          success: function(html) {
            $("#searchResults").append(html);
            $("#searchResults .card").click(Searcher.onClickCard);
            Searcher.attachScrollListener();
            Searcher.handleCardMode();
          }
      });
    },

    onSearchFocus: function() {
      $("#searchbox").val("");
      $("#searchbox").removeClass("grayText");
    },

    onSearchBlur: function() {
      if ($("#searchbox").val() != "")
        return;

      $("#searchbox").addClass("grayText");
      $("#searchbox").val('type "/" to search');
    },

    attachScrollListener: function() {
      if ($("#loadMore").val() == "none")
        $(document).unbind("scroll");
      else
        $(document).bind("scroll", Searcher.onScroll);
    },

    onScroll: function(event) {
      if (document.body.scrollTop > Searcher.maxScroll) {
        Searcher.maxScroll += 3000;
        var offset = $("#loadMore").val();
        $("#loadMore").remove();
        Searcher.search(offset, false);
      }
    },

    previousBreadcrumb: function(event) {
      event.preventDefault(); // prevent moving backwards through browser history

      $(".breadcrumb").last().remove();
      if ($(".breadcrumb").size() == 0) {
        $("#searchBreadcrumbs").remove();
      }
      $("#searchbox").val("");
      Searcher.maxScroll = 3000;
      Searcher.search(0, true);
    },

    isCardMode: false,
    toggleCardMode: function() {
      $.ajax({
        type: "POST",
        url: "/search/toggle_card_mode",
        data: {},
        success: function(cardMode) {
          if (cardMode.match(/true/)) {
            Searcher.activateCardMode();
          } else {
            Searcher.deactivateCardMode();
          }
        }
      });
    },

    setFormat: function(format) {
      $.ajax({
        type: "POST",
        url: "/search/set_format",
        data: {
          format: format
        },
        success: function() {
          var offset = $("#loadMore").val();
          Searcher.search(0, true, "");
        }
      });
    },

    activateCardMode: function() {
      Searcher.isCardMode = true;
      var cards = $("#searchResults .card_skeleton");
      $.each(cards, function(index, element) {
        if (index <= 9) {
          var child = element.firstChild;
          while (child.id != "card_selector") {
            child = child.nextSibling;
            if (!child) return;
          }
          var selectorLabel = child;
          selectorLabel.innerHTML = ((index + 1) % 10);
        } else {
          return;
        }
      });
    },

    deactivateCardMode: function() {
      Searcher.isCardMode = false;
      var cards = $("#searchResults .card_skeleton");
      $.each(cards, function(index, element) {
        if (index <= 9) {
          var child = element.firstChild;
          while (child.id != "card_selector") {
            child = child.nextSibling;
            if (!child) return;
          }
          var selectorLabel = child;
          selectorLabel.innerHTML = "";
        } else {
          return;
        }
      });
    },

    handleCardMode: function() {
      $.ajax({
        type: "POST",
        url: "/search/get_card_mode",
        data: {},
        success: function(cardMode) {
          if (cardMode.match(/true/)) {
            Searcher.activateCardMode();
          } else {
            Searcher.deactivateCardMode();
          }
        }
      });
    },

    selectCard: function(selectNum) {
      if (!this.isCardMode) return;

      var cards = $("#searchResults .card_skeleton");
      var cardId = $(cards[selectNum -1]).attr("cardid");
      var deckId = $("#deckmetadata").attr("deckid");
      var deckName = $("#deckmetadata").attr("deckname");

      $.ajax({
          type: "POST",
          url: "/search/add_card_to_deck",
          data: {
            card_id: cardId,
            deck_id: deckId,
            deck_name: deckName
          },
          success: function(html) {
            if (html != "")
            {
              $("#deckmetadata").replaceWith(html);
            }
          }
      });
    },

    onKeyDown: function(event) {
      if ($("*:focus").size() > 0 && event.which != 13)
        return;


      //console.log("keypress: " + event.which);

      switch (event.which) {
        case 13: Searcher.newSearch(); break; // return
        case 8: Searcher.previousBreadcrumb(event); break; // backspace
        case 191: Searcher.focusSearchbox("", event); break; // /
        case 78: Searcher.focusSearchbox("name", event); break; // n
        case 84: Searcher.focusSearchbox("text", event); break; // t
        case 77: Searcher.focusSearchbox("mana", event); break; // m
        case 67: Searcher.focusSearchbox("color", event); break; // c
        case 89: Searcher.focusSearchbox("type", event); break; // y
        case 83: Searcher.focusSearchbox("set", event); break; // s
        case 188: Searcher.focusSearchbox("power", event); break; // ,
        case 190: Searcher.focusSearchbox("toughness", event); break; // .
        case 88: Searcher.toggleCardMode(event); break; // x
        case 49: Searcher.selectCard(1); break; // 1
        case 50: Searcher.selectCard(2); break; // 2
        case 51: Searcher.selectCard(3); break; // 3
        case 52: Searcher.selectCard(4); break; // 4
        case 53: Searcher.selectCard(5); break; // 5
        case 54: Searcher.selectCard(6); break; // 6
        case 55: Searcher.selectCard(7); break; // 7
        case 56: Searcher.selectCard(8); break; // 8
        case 57: Searcher.selectCard(9); break; // 9
        case 48: Searcher.selectCard(10); break; // 0
      }
    },


  }

  $(document).ready(Searcher.init);

  window.onresize = function(event) {
    Utils.repositionDeckMetadata(680, 880);
  }

  window.onload = function(event) {
    Utils.repositionDeckMetadata(680, 880);
  }

</script>

<div id="pageBox">
  <div id="searchSection">
    <div id="searchboxDiv">
      <input id="searchField" type="hidden" value="name" />
      <input id="searchbox" class="grayText" value='type "/" to search' type="text" />
    </div>
    <div id="searchInstructions">
      <table>
        <tr>
          <div id="formatRow">
            <%
            @format = ((session[:format]) ? session[:format] : 'all')
            [ 'all', 'extended', 'standard', 'block'].each do |format| %>
              <%= radio_button_tag 'format', format, @format == format, {
                :onclick => "Searcher.setFormat('" + format + "');"
                } %>
              <%= label_tag "format_#{format}", format.humanize %>
            <% end %>
          </div>
        </tr>
        <tr>
          <td><span class="hotkey">/</span>: restart search</td>
          <td><span class="hotkey">n</span>: search card name (name:)</td>
          <td><span class="hotkey">t</span>: search card text (text:)</td>
        </tr>
        <tr>
          <td><span class="hotkey">m</span>: search converted mana cost (mana:)</td>
          <td><span class="hotkey">c</span>: search by mana color (color:)</td>
          <td><span class="hotkey">y</span>: search by card type (type:)</td>
        </tr>
        <tr>
          <td><span class="hotkey">s</span>: search by set (set:)</td>
          <td><span class="hotkey bold">,</span>: search by power (power:)</td>
          <td><span class="hotkey bold">.</span>: search by toughness (toughness:)</td>
        </tr>
        <tr>
          <td><span class="hotkey bold">x</span>: toggle keyboard card selection</td>
        </tr>
      </table>
    </div>
    <div id="resultsSection">
      <div id="searchResults">
      </div>
    </div>
  </div>
  <%= render :partial => "deckmetadata", :locals => {:deck => @deck, :viewing_deck => false} %>
</div>
