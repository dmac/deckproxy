<script type="text/javascript">
  Searcher = {
    maxScroll: 3000,

    init: function() {
      $(document).keydown(Searcher.onKeyDown);
      $("#searchbox").focus(Searcher.onSearchFocus);
      $("#searchbox").blur(Searcher.onSearchBlur);
    },

    onClickCard: function(event) {
      var card = $(event.currentTarget);
      var cardId = card.attr("cardid");
      var deckId = $("#deckmetadata").attr("deckid");
      var deckName = $("#deckmetadata").attr("deckname");

      $.ajax({
          type: "POST",
          url: "/search/add_card_to_deck",
          data: {
            card_id: cardId,
            deck_id: deckId,
            deck_name: deckName
          },
          success: function(html) {
            $("#deckmetadata").replaceWith(html);
          }
      });
    },

    focusSearchbox: function(field, event) {
      if (event)
        event.preventDefault();
      $("#searchbox").focus();
      if (field != "") {
        $("#searchbox").val(field + ": ");
      } else {
        $("#searchbox").val("");
        $("#searchBreadcrumbs").html("")
      }
    },

    newSearch: function() {
      Searcher.maxScroll = 3000;
      Searcher.search(0, true);
    },

    search: function(offset, newSearch) {
      $("#searchbox").blur();

      var query = $("#searchbox").val();

      var queries = {};
      var breadcrumbs = $(".breadcrumb input");
      $.each(breadcrumbs, function(index, element) {
        queries[$(element).attr("name")] = $(element).val();
      });

      if (newSearch)
        $("#searchResults").html("");

      $.ajax({
          type: "POST",
          url: "/search/search",
          data: {
            query: query,
            queries: queries,
            offset: offset
          },
          success: function(html) {
            $("#searchResults").append(html);
            $("#searchResults .card").click(Searcher.onClickCard);
            Searcher.attachScrollListener();
          }
      });
    },

    onSearchFocus: function() {
      $("#searchbox").val("");
      $("#searchbox").removeClass("grayText");
    },

    onSearchBlur: function() {
      if ($("#searchbox").val() != "")
        return;

      $("#searchbox").addClass("grayText");
      $("#searchbox").val('type "/" to search');
    },

    attachScrollListener: function() {
      if ($("#loadMore").val() == "none")
        $(document).unbind("scroll");
      else
        $(document).bind("scroll", Searcher.onScroll);
    },

    onScroll: function(event) {
      if (document.body.scrollTop > Searcher.maxScroll) {
        Searcher.maxScroll += 3000;
        var offset = $("#loadMore").val();
        $("#loadMore").remove();
        Searcher.search(offset, false);
      }
    },

    previousBreadcrumb: function(event) {
      event.preventDefault(); // prevent moving backwards through history
    },

    searchName: function(event) {
      Searcher.focusSearchbox("name", event);
    },

    searchText: function(event) {
      Searcher.focusSearchbox("text", event);
    },

    searchMana: function(event) {
      Searcher.focusSearchbox("mana", event);
    },

    searchColor: function(event) {
      Searcher.focusSearchbox("color", event);
    },

    onKeyDown: function(event) {
      if ($("#searchbox:focus").size() > 0 && event.which != 13)
        return;

      console.log("keypress: " + event.which);

      switch (event.which) {
        case 13: Searcher.newSearch(); break; // return
        case 191: Searcher.focusSearchbox("", event); break; // /
        case 8: Searcher.previousBreadcrumb(event); break; // backspace
        case 78: Searcher.searchName(event); break; // n
        case 84: Searcher.searchText(event); break; // t
        case 77: Searcher.searchMana(event); break; // m
        case 67: Searcher.searchColor(event); break; // c
      }
    }
  }

  $(document).ready(Searcher.init);

</script>

<section id="searchSection">
  <div id="searchboxDiv">
    <input id="searchField" type="hidden" value="name" />
    <input id="searchbox" class="grayText" value='type "/" to search' type="text" />
  </div>
  <div id="searchInstructions">
    <p>/: restart search</p>
    <p>n: search card name (name:)</p>
    <p>t: search card text (text:)</p>
    <p>m: search converted mana cost (mana:)</p>
    <p>c: search by mana color (color:)</p>
  </div>
  <div id="resultsSection">
    <div id="searchResults">
    </div>
    <%= render :partial => "deckmetadata", :locals => {:deck => nil} %>
  </div>
</section>

